---
import { getCollection } from "astro:content";
import FormattedDate from "./FormattedDate.astro";
import { SITE_TITLE, BASE_PATH } from "$consts";
import { getTagColor as getTagColorSSR, getTextColor as getTextColorSSR } from "./tagColors";

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
);

// Get all unique tags
const allTags = [...new Set(posts.flatMap(post => post.data.tags))].sort();

// Get current tag from URL
const currentTag = Astro.url.searchParams.get('tag');
const filteredPosts = currentTag 
  ? posts.filter(post => post.data.tags.includes(currentTag))
  : posts;

// Only show tags on the blog listing page
const isBlogListing = Astro.url.pathname === `${BASE_PATH}` || Astro.url.pathname === `${BASE_PATH}/`;
---

<aside>
  <nav>
    <h3><a href={BASE_PATH}>{SITE_TITLE}</a></h3>
    
    <div class="tags">
      <h4>Tags</h4>
      <div class="tag-list">
        <button class="tag" data-tag="">All</button>
        {
          allTags.map(tag => (
            <button class="tag" data-tag={tag}>
              {tag}
            </button>
          ))
        }
      </div>
    </div>

    <ul id="posts-list">
      {
        posts.map((post) => (
          <li data-tags={post.data.tags.join(',')}>
            <a href={`${BASE_PATH}/${post.id}/`}>
              {post.data.title}
              <span class="date">
                <FormattedDate date={post.data.date} />
              </span>
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</aside>

<script>
  // Inline for client-side use
  const tagColors: string[] = [
    '#3B82F6', '#F59E42', '#10B981', '#F43F5E', '#A78BFA', '#FBBF24', '#6366F1', '#F472B6', '#22D3EE', '#84CC16', '#E11D48', '#0EA5E9',
  ];
  function getTagColor(tag: string): string {
    if (!tag || tag.toLowerCase() === 'all') return 'var(--accent, #a78bfa)';
    const index = Array.from(tag).reduce((acc: number, char: string) => acc + char.charCodeAt(0), 0);
    return tagColors[index % tagColors.length];
  }
  function getTextColor(bg: string): string {
    const hex = bg.replace('#', '');
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    return brightness > 140 ? '#222' : '#fff';
  }
  let currentTag = '';
  const posts = document.querySelectorAll<HTMLLIElement>('#posts-list li');
  const tagButtons = document.querySelectorAll<HTMLButtonElement>('.tag');

  function setTagButtonStyles() {
    tagButtons.forEach(button => {
      const tag = button.getAttribute('data-tag') || '';
      const bg = getTagColor(tag);
      const fg = getTextColor(bg.replace('var(--accent, ', '').replace(')', '') || bg);
      button.style.backgroundColor = bg;
      button.style.color = fg;
      button.style.borderColor = bg;
    });
  }

  // Call this after any tag color changes
  setTagButtonStyles();

  function filterPosts(tag: string) {
    currentTag = tag;
    posts.forEach(post => {
      const postTags = post.getAttribute('data-tags')?.split(',') || [];
      if (!tag || postTags.includes(tag)) {
        post.style.display = '';
      } else {
        post.style.display = 'none';
      }
    });

    // Update active state of tag buttons
    tagButtons.forEach(button => {
      const buttonTag = button.getAttribute('data-tag') || '';
      if (buttonTag === tag) {
        button.classList.add('active');
      } else {
        button.classList.remove('active');
      }
    });
    setTagButtonStyles();
  }

  tagButtons.forEach(button => {
    button.addEventListener('click', () => {
      filterPosts(button.getAttribute('data-tag') || '');
    });
  });

  // Listen for tag selection events from post pages
  window.addEventListener('tagSelected', ((event: CustomEvent<string>) => {
    filterPosts(event.detail);
  }) as EventListener);

  // Set initial state
  filterPosts('');
</script>

<style>
  aside {
    width: 200px;
    padding: 1.5em 1em;
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    background: var(--nav-bg-color);
    border-right: 1px solid rgba(var(--black), 5%);
    overflow-y: auto;
    font-size: 0.9em;
  }

  nav {
    display: flex;
    flex-direction: column;
    gap: 2em;
  }

  h3 {
    font-size: 1.2em;
    margin: 0;
    color: var(--accent);
    letter-spacing: 0.02em;
    font-weight: 500;
  }

  h3 a {
    text-decoration: none;
    color: var(--accent);
  }

  h4 {
    font-size: 1em;
    margin: 0 0 0.5em 0;
    color: var(--gray);
  }

  .tags {
    margin-bottom: 1em;
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
  }

  .tag {
    display: inline-block;
    padding: 0.2em 0.7em;
    border-radius: 4px;
    font-size: 0.85em;
    text-decoration: none;
    transition: all 0.2s ease;
    border: 2px solid transparent;
    cursor: pointer;
    opacity: 0.9;
    font-weight: 500;
    margin-bottom: 2px;
  }

  .tag:hover, .tag.active {
    opacity: 1;
    transform: translateY(-1px) scale(1.05);
    box-shadow: 0 2px 8px rgba(0,0,0,0.12);
    outline: none;
  }

  ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  li {
    margin: 0.8em 0;
  }

  a {
    color: var(--black);
    text-decoration: none;
    display: block;
    line-height: 1.6;
    letter-spacing: 0.01em;
  }

  a:hover {
    color: var(--accent);
  }

  .date {
    display: block;
    font-size: 0.8em;
    color: var(--gray);
    margin-top: 0.2em;
  }

  @media (max-width: 1200px) {
    aside {
      display: none;
    }
  }
</style> 