---
import { getCollection } from "astro:content";
import FormattedDate from "./FormattedDate.astro";
import ThemeToggle from "./ThemeToggle.astro";
import { Icon } from 'astro-icon/components'
import { SITE_TITLE, BASE_PATH } from "$consts";

const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
);

// Get all unique tags
const allTags = [...new Set(posts.flatMap(post => post.data.tags))].sort();

---
<aside>
  <nav>
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5em;">
      <h3><a href={BASE_PATH}>{SITE_TITLE}</a></h3>
      <div style="display: flex; gap: 0.5em; align-items: center;">
        <ThemeToggle />
        <button id="sidebar-toggle" aria-label="Toggle sidebar">
          <Icon name="mdi:close" style="width: 1.5rem; height: 1.5rem;" />
        </button>
      </div>
    </div>
    
    <div class="tags">
      <h4 style="display: flex; align-items: center; gap: 0.5em; margin-bottom: 0.3em;">
        Tags
        <button id="toggle-tags" class="toggle-tags-btn" aria-label="Toggle tags">▼</button>
      </h4>
      <div class="tag-list hide">
        <button class="tag" data-tag="">All</button>
        {
          allTags.map(tag => (
            <button class="tag" data-tag={tag}>
              {tag}
            </button>
          ))
        }
      </div>
    </div>

    <ul id="posts-list">
      {
        posts.map((post) => (
          <li data-tags={post.data.tags.join(',')}>
            <a href={`${BASE_PATH}/${post.id}/`}>
              {post.data.title}
              <span class="date">
                <FormattedDate date={post.data.date} />
              </span>
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</aside>

<script>
  let currentTag = '';
  const tagColors: string[] = [
    '#3B82F6', '#F59E42', '#10B981', '#F43F5E', '#A78BFA', '#FBBF24', '#6366F1', '#F472B6', '#22D3EE', '#84CC16', '#E11D48', '#0EA5E9',
  ];

  function getTagColor(tag: string): string {
    if (!tag || tag.toLowerCase() === 'all') return 'var(--accent, #a78bfa)';
    const index = Array.from(tag).reduce((acc: number, char: string) => acc + char.charCodeAt(0), 0);
    return tagColors[index % tagColors.length];
  }

  function getTextColor(bg: string): string {
    const hex = bg.replace('#', '');
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    return brightness > 140 ? '#222' : '#fff';
  }
  
  const posts = document.querySelectorAll<HTMLLIElement>('#posts-list li');
  const tagButtons = document.querySelectorAll<HTMLButtonElement>('.tag');

  function setTagButtonStyles() {
    tagButtons.forEach(button => {
      const tag = button.getAttribute('data-tag') || '';
      const bg = getTagColor(tag);
      const fg = getTextColor(bg.replace('var(--accent, ', '').replace(')', '') || bg);
      button.style.backgroundColor = bg;
      button.style.color = fg;
      button.style.borderColor = bg;
    });
  }

  // Call this after any tag color changes
  setTagButtonStyles();

  function filterPosts(tag: string) {
    currentTag = tag;
    posts.forEach(post => {
      const postTags = post.getAttribute('data-tags')?.split(',') || [];
      if (!tag || postTags.includes(tag)) {
        post.style.display = '';
      } else {
        post.style.display = 'none';
      }
    });

    // Update active state of tag buttons
    tagButtons.forEach(button => {
      const buttonTag = button.getAttribute('data-tag') || '';
      if (buttonTag === tag) {
        button.classList.add('active');
      } else {
        button.classList.remove('active');
      }
    });
    setTagButtonStyles();
  }

  tagButtons.forEach(button => {
    button.addEventListener('click', () => {
      filterPosts(button.getAttribute('data-tag') || '');
    });
  });

  // Listen for tag selection events from post pages
  window.addEventListener('tagSelected', ((event: CustomEvent<string>) => {
    filterPosts(event.detail);
  }) as EventListener);

  // Set initial state
  filterPosts('');

  // Add toggle functionality
  const toggleBtn = document.getElementById('toggle-tags');
  const tagList = document.querySelector('.tag-list');
  if (toggleBtn && tagList) {
    // Remove hide class on load so tags are visible by default
    toggleBtn.addEventListener('click', function() {
      const isHidden = tagList.classList.contains('hide');
      tagList.classList.toggle('hide', !isHidden);
      tagList.classList.toggle('show', isHidden);
      toggleBtn.textContent = isHidden ? '▲' : '▼';
    });
  }

  // Add sidebar toggle functionality
  const sidebarToggle = document.getElementById('sidebar-toggle');
  const aside = document.querySelector('aside');
  const main = document.querySelector('main');
  const sidebarOpen = document.getElementById('sidebar-open');
  if (sidebarToggle && aside && main && sidebarOpen) {
    sidebarToggle.addEventListener('click', () => {
      main.style.marginLeft = "15px";
      aside.style.display = "none";
      sidebarToggle.style.display = 'inline-block';
      sidebarOpen.style.display = 'inline-block';
    });
  }
</script>

<style>
  #sidebar-toggle {
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    color: var(--main-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
  }

  #sidebar-toggle:hover {
    background-color: var(--raw-bg-color);
  }

  aside {
    width: 200px;
    padding: 15px 15px;
    background: var(--nav-bg-color);
    border-right: 1px solid rgba(var(--black), 5%);
    overflow-y: auto;
    font-size: 0.9em;
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    z-index: 100;
    transition: transform 0.3s ease;
  }

  aside.collapsed {
    transform: translateX(-100%);
  }

  main {
    margin-left: 200px;
    transition: margin-left 0.3s ease;
  }

  main.expanded {
    margin-left: 0;
  }

  nav {
    display: flex;
    flex-direction: column;
    gap: 0;
  }

  h3 {
    font-size: 1.2em;
    margin: 0;
    color: var(--accent);
    letter-spacing: 0.02em;
    font-weight: 500;
  }

  h3 a {
    text-decoration: none;
    color: var(--accent);
  }

  h4 {
    font-size: 1em;
    margin: 0 0 0.5em 0;
    color: var(--gray);
  }

  .tags {
    margin-bottom: 0;
  }

  .toggle-tags-btn {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1.1em;
    color: var(--accent);
    padding: 0 0.2em;
    transition: color 0.2s;
    line-height: 1;
    display: flex;
    align-items: center;
  }

  .toggle-tags-btn:hover, .toggle-tags-btn:focus {
    color: var(--accent-hover, #a78bfa);
    outline: none;
  }

  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
    margin-top: 0.2em;
    margin-bottom: 1em;
    opacity: 1;
    max-height: 200px;
    transition: opacity 0.2s, max-height 0.2s, margin-top 0.2s, margin-bottom 0.2s;
    /* overflow: hidden; */
    overflow-y: auto;
    overflow-x: hidden;
  }

  .tag-list[hidden], .tag-list.hide {
    opacity: 0;
    max-height: 0;
    margin-top: 0;
    margin-bottom: 0;
    pointer-events: none;
  }


  ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  li {
    margin: 0.8em 0;
  }

  a {
    color: var(--black);
    text-decoration: none;
    display: block;
    line-height: 1.6;
    letter-spacing: 0.01em;
  }

  a:hover {
    color: var(--accent);
  }

  .date {
    display: block;
    font-size: 0.8em;
    color: var(--gray);
    margin-top: 0.2em;
  }

</style> 